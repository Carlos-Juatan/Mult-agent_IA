{
  "name": "SRD Classify",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9f81a0d1-c831-4ebd-93ab-631631197d8a",
              "name": "account_id",
              "value": "={{ $json.body.account.id }}",
              "type": "number"
            },
            {
              "id": "bfc1fbaa-7bae-4b08-80cd-d85c80c265a6",
              "name": "conversation_id",
              "value": "={{ $json.body.conversation.messages[0].conversation_id }}",
              "type": "number"
            },
            {
              "id": "b407f7ae-3b85-41c0-ab02-e7a4885fcbce",
              "name": "inbox_id",
              "value": "={{ $json.body.conversation.contact_inbox.inbox_id }}",
              "type": "number"
            },
            {
              "id": "a1148ba9-e2d3-4ff3-a2d8-251f29865841",
              "name": "content",
              "value": "={{ $json.body.conversation.messages[0].content }}",
              "type": "string"
            },
            {
              "id": "364a98b6-8705-44dd-9aab-e87e1cc901e2",
              "name": "message_type",
              "value": "={{ $json.body.message_type }}",
              "type": "string"
            },
            {
              "id": "75d42f45-0e00-4145-bb77-3120ac96a301",
              "name": "contact",
              "value": "={{ $json.body.conversation.meta.sender.removeField(\"additional_attributes\").removeField(\"thumbnail\").removeField(\"identifier\").removeField(\"blocked\").removeField(\"type\") }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        144,
        -32
      ],
      "id": "7194d06d-d8b7-47b3-859b-e926bb8e427b",
      "name": "payloadResume",
      "notesInFlow": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0b5a79c8-a926-4a8c-9ea2-49e6ac21a0f9",
              "leftValue": "={{ $json.message_type }}",
              "rightValue": "incoming",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        368,
        -32
      ],
      "id": "6e1101db-8346-4bd3-8d14-bf0ce1a6d602",
      "name": "filterFromMe"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "68ad9904-120b-421e-ad44-49418f0f7a73",
              "name": "baseUrl",
              "value": "https://chat4.codesefaz.local",
              "type": "string"
            },
            {
              "id": "30e97a42-d144-469a-82c3-b030ad7305c0",
              "name": "memory",
              "value": "=memory-{{ $json.conversation_id }}",
              "type": "string"
            },
            {
              "id": "0b8eea99-4d4b-4e8c-a16d-a319b04cacc9",
              "name": "debounce",
              "value": 10,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        592,
        -32
      ],
      "id": "3c7f1033-b12c-4610-bc62-de86398bab17",
      "name": "setVariables",
      "notesInFlow": true
    },
    {
      "parameters": {
        "content": "## üíæ Iniciando e definindo vari√°veis",
        "height": 460,
        "width": 900,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        64,
        -224
      ],
      "id": "cb2fe432-a9d5-4f30-aef7-33aa0557c10a",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=inputMessage-{{ String($('payloadResume').item.json.conversation_id) }}",
        "value": "={{ \n  ($json.messageUser || '') \n  + ($json.messageUser ? '\\n' : '') \n  + $('webhookDataChatwoot').item.json.body.conversation.messages[0].content \n}}",
        "keyType": "string"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1680,
        -128
      ],
      "id": "aab11a12-b41b-4b0b-be0b-016894550d6e",
      "name": "messageInsert",
      "notesInFlow": true,
      "credentials": {
        "redis": {
          "id": "29bbEUHvq7aUXKnr",
          "name": "Redis account"
        }
      },
      "notes": "- insere mensagens na key (inputMessage-conversationid) de forma incremental."
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ String($('payloadResume').item.json.conversation_id) }}",
        "value": "={{ $json.currentDate }}",
        "keyType": "string",
        "expire": true,
        "ttl": 600
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1280,
        -128
      ],
      "id": "4b5f4118-28f6-4903-8786-a4812d33f69d",
      "name": "setCurrentDate",
      "notesInFlow": true,
      "credentials": {
        "redis": {
          "id": "29bbEUHvq7aUXKnr",
          "name": "Redis account"
        }
      },
      "notes": "- Insere a data corrente deste fluxo como valor da chave que ser√° o 'conversationid' do chatwoot.\n\n- Deste modo n√£o h√° problema o tipo de canal de entrada se √© whatsapp, Instagram ou outros."
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "currentDate",
        "key": "={{ String($('payloadResume').item.json.conversation_id) }}",
        "keyType": "string",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1488,
        80
      ],
      "id": "ffd893d1-b752-495b-8736-988cd8172182",
      "name": "getFutureDate",
      "notesInFlow": true,
      "credentials": {
        "redis": {
          "id": "29bbEUHvq7aUXKnr",
          "name": "Redis account"
        }
      },
      "notes": "Retorna a data futura da key. \n\nSim ela pode ser futura pois durante o WAIT que est√° configurando antes desse node, o cliente pode ter enviado outra mensagem durante este per√≠odo de espera"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "messageUser",
        "key": "=inputMessage-{{ String($('payloadResume').item.json.conversation_id) }}",
        "keyType": "string",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1488,
        -128
      ],
      "id": "41b7e06e-e3ab-4511-9a7e-67a6f19d0807",
      "name": "getMessage",
      "notesInFlow": true,
      "credentials": {
        "redis": {
          "id": "29bbEUHvq7aUXKnr",
          "name": "Redis account"
        }
      },
      "notes": "- Verifica se h√° mensagens do cliente na chave (Key)\n- objetivo de pedir esse GET √© para incrementar novas mensagens na mesma chave sem perder as antigas."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "b50066ef-17e2-4cb5-8447-f3c3f4693521",
              "leftValue": "={{ $('setCurrentDate').item.json.currentDate }}",
              "rightValue": "={{ $json.currentDate }}\n",
              "operator": {
                "type": "dateTime",
                "operation": "afterOrEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "07eca371-e2f0-434f-acbf-71411669882c",
      "name": "confereFutureTime",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [
        1680,
        80
      ],
      "notesInFlow": true,
      "notes": "Aqui comparamos se a data da mesma key que pegamos durante o WAIT √© mais recente que a data deste fluxo que est√° rodando agora."
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "messageUser",
        "key": "=inputMessage-{{ String($('payloadResume').item.json.conversation_id) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1088,
        80
      ],
      "id": "74b043df-b04b-445e-b08b-50c60e6c4070",
      "name": "messageAgregated",
      "notesInFlow": true,
      "credentials": {
        "redis": {
          "id": "29bbEUHvq7aUXKnr",
          "name": "Redis account"
        }
      },
      "notes": "- Retorna as mensagens agregadas"
    },
    {
      "parameters": {
        "amount": "={{ $('setVariables').item.json.debounce }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1280,
        80
      ],
      "id": "889ea269-58eb-4197-93fb-4e43c32a79b8",
      "name": "tempoEspera",
      "webhookId": "1da3e712-f30e-4b8a-8d98-ac18fea97639",
      "notesInFlow": true,
      "notes": "Selecione o tempo de deBounce (tempo para agregar mensagens multiplas do cliente dentro de um mesmo espa√ßo de tempo evitando que o agente responda todas as mensagens picotadas do cliente.)"
    },
    {
      "parameters": {
        "options": {
          "timezone": "America/Sao_Paulo"
        }
      },
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1088,
        -128
      ],
      "id": "2a5f9804-8731-42e7-a74b-f8f2fc63ea7f",
      "name": "setDateTime"
    },
    {
      "parameters": {
        "content": "## ‚ö°Ô∏è Armazenando Dados para o deBounce",
        "height": 460,
        "width": 880,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1008,
        -224
      ],
      "id": "a432455d-b0b1-4319-8aa4-c1434c2ecc68",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "mensagem-do-chatwoot",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -800,
        -32
      ],
      "id": "cd78f8db-74ed-4f13-bc45-b5e0160086fe",
      "name": "webhookDataChatwoot",
      "webhookId": "dd3efb08-74a5-417c-9f8c-0495304d35a5"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('setVariables').item.json.memory }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1088,
        -640
      ],
      "id": "22018a3d-9b07-40fa-bf96-a18a787f9792",
      "name": "resetRedisMemory",
      "credentials": {
        "redis": {
          "id": "29bbEUHvq7aUXKnr",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "={{ $('setVariables').item.json.baseUrl }}/api/v1/accounts/{{ $('payloadResume').item.json.account_id }}/contacts/{{ $('payloadResume').item.json.contact.id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1088,
        -416
      ],
      "id": "1c1f2577-1bf6-4f75-a5de-69b4b401b901",
      "name": "removeChatwotContact",
      "credentials": {
        "httpHeaderAuth": {
          "id": "pUofjeHZFs7QLIQq",
          "name": "Chatwoot account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('setVariables').item.json.baseUrl }}/api/v1/accounts/{{ $('payloadResume').item.json.account_id }}/conversations/{{ $('payloadResume').item.json.conversation_id }}/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "=Mem√≥ria do Agente resetada com sucesso!"
            },
            {
              "name": "message_type",
              "value": "outgoing"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1680,
        -640
      ],
      "id": "093e19e2-e9c3-4a4e-b2ea-f794dd5e4553",
      "name": "sendChatwootMsgReset",
      "credentials": {
        "httpHeaderAuth": {
          "id": "pUofjeHZFs7QLIQq",
          "name": "Chatwoot account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1280,
        -416
      ],
      "id": "8c0fa935-390d-44e1-b859-88476043d371",
      "name": "endCleaningOperation",
      "notesInFlow": false
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a30fce78-af2b-4e89-9b30-83713f6ffe71",
              "leftValue": "={{ $('webhookDataChatwoot').item.json.body.conversation.messages[0].content }}",
              "rightValue": "resetar-ia",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        800,
        -32
      ],
      "id": "c8de08d5-3375-4a36-a25c-7d2cdf71104f",
      "name": "messageReset"
    },
    {
      "parameters": {
        "content": "## üìù Resetando e Limpadando Para Testes do Agente",
        "height": 480,
        "width": 880,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1008,
        -736
      ],
      "id": "f91db395-a737-45b3-ad18-35740bab283c",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "35831818-2b6c-4e05-ba38-d6d1e2bc09ca",
              "name": "query",
              "value": "={{ $('messageAgregated').item.json.messageUser }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1968,
        -128
      ],
      "id": "bee3d2bf-b339-4bdb-a029-dc73091d269a",
      "name": "contentMesssage"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5c8bd00f-f34f-40fe-807f-74787d882d92",
              "name": "output",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2528,
        -128
      ],
      "id": "7a7569b7-c9e7-42e5-b462-0b493dd9f72a",
      "name": "setOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('setVariables').item.json.baseUrl }}/api/v1/accounts/{{ $('payloadResume').item.json.account_id }}/conversations/{{ $('payloadResume').item.json.conversation_id }}/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{ $json.output }}"
            },
            {
              "name": "message_type",
              "value": "outgoing"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2720,
        -128
      ],
      "id": "431faaaa-e44e-4044-937f-74a3a3171d86",
      "name": "sendChatwootMessage",
      "credentials": {
        "httpHeaderAuth": {
          "id": "pUofjeHZFs7QLIQq",
          "name": "Chatwoot account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=inputMessage-{{ $('webhookDataChatwoot').item.json.body.conversation.messages[0].conversation_id }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2528,
        80
      ],
      "id": "5decc876-71c4-4cf8-ba08-5df12a0b52e5",
      "name": "resetMessageAgregated",
      "credentials": {
        "redis": {
          "id": "29bbEUHvq7aUXKnr",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2752,
        80
      ],
      "id": "e91026f3-f9da-48bd-9a9c-6c52f6e208ab",
      "name": "endConversation"
    },
    {
      "parameters": {
        "content": "## ‚ú® Fluxo de Conversa√ß√£o do Agente (Classifica√ß√£o, Envio e Reset de Mensagens)",
        "height": 460,
        "width": 1020
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1920,
        -224
      ],
      "id": "b05d8f68-c8af-4eac-a0b2-1e8765765c1e",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1deefdbb-6438-44e8-bc77-68560ccbb86e",
                    "leftValue": "={{ $json.body.attachments[0].file_type }}",
                    "rightValue": "audio",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.attachments[0].file_type }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notExists",
                      "singleValue": true
                    },
                    "id": "a099676e-af17-4d3a-9217-d7b54d4b39cb"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0209e12f-f34f-4836-929d-f1f8e5915806",
                    "leftValue": "={{ $json.body.attachments[0].file_type }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "files"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -608,
        -48
      ],
      "id": "cb2aa1db-ffec-4476-97ab-7f0e490cd0d2",
      "name": "mensageType"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "cyS3yGhU85yVMVXz",
          "mode": "list",
          "cachedResultName": "audioToText"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -336,
        -160
      ],
      "id": "8444d5c1-8ed6-4683-a67f-74f91af48f42",
      "name": "audioToText",
      "notesInFlow": true
    },
    {
      "parameters": {
        "jsCode": "const data = $(\"webhookDataChatwoot\").first().json;\n\ndata.body.conversation.messages[0].content = $input.first().json.results[0].alternatives[0].transcript;\n\nreturn data;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -144,
        -160
      ],
      "id": "2f8e41d8-a4b1-49b8-a3b3-f28ab7733668",
      "name": "mergeTextFromAudio"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -336,
        112
      ],
      "id": "33f0c528-2cbd-4b8f-ae23-141a11af9ff1",
      "name": "doNothing"
    },
    {
      "parameters": {
        "content": "## üåê Recebendo o webhook",
        "height": 460,
        "width": 400,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -864,
        -224
      ],
      "id": "4934f321-7911-4315-b327-d72a74d61deb",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## üîà Audio para texto",
        "height": 200,
        "width": 440,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -416,
        -224
      ],
      "id": "7d0caadb-0e8d-491c-be0c-4bc382542a54",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## üóëÔ∏è Outros tipo de mensagem",
        "height": 200,
        "width": 440
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -416,
        48
      ],
      "id": "d1964aaf-4f23-4087-8e60-efd187f4715c",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Quest√£o do Usu√°rio:\n{{ $json.query }}\n\nMem√≥ria do Usu√°rio (memory):\n{{ $('setVariables').item.json.memory }}",
        "options": {
          "systemMessage": "=## PERFIL E FUN√á√ÉO PRINCIPAL\nVoc√™ √© um **sistema de roteamento de chat inteligente** com a responsabilidade exclusiva de direcionar a quest√£o dos usu√°rios para chats especializados. **Importante: voc√™ n√£o responde diretamente ao usu√°rio** - voc√™ apenas analisa a quest√£o do usu√°rio, seleciona o chat especializado apropriado e retorna a resposta gerada por esse chat sem modifica√ß√µes.\n\n## RESPONSABILIDADES CENTRAIS\n1. **An√°lise de inten√ß√£o**: Identificar com precis√£o o contexto e a necessidade do usu√°rio\n2. **Sele√ß√£o de chat**: Determinar qual chat especializado √© mais adequado para a quest√£o.\n3. **Execu√ß√£o de chat**: Acionar o chat selecionado para gerar a resposta\n4. **Entrega de resposta**: Fornecer a resposta exata gerada pelo chat especializado, sem altera√ß√µes\n\n## FLUXO DE OPERA√á√ÉO\n1. **Receber quest√£o** do usu√°rio\n2. **Analisar inten√ß√£o** e contexto da conversa\n4. **Selecionar e executar** um √∫nico chat especializado apropriado\n5. **Entregar a resposta** gerada pelo chat especializado sem modifica√ß√µes\n6. **Processar instru√ß√µes especiais** se a resposta contiver \"SISTEMA INFO\"\n\n## PROCESSAMENTO DE INSTRU√á√ïES ESPECIAIS\n\n### Execu√ß√£o de Chats em Sequ√™ncia\nQuando uma resposta cont√©m: \"SISTEMA INFO - Executar Chat 'Nome do Chat' buscando por {detalhes da busca}\"\n\n1. **Extrair**: Nome do chat e detalhes da busca\n2. **Executar**: O chat especificado com os detalhes extra√≠dos\n3. **Retornar**: A resposta gerada pelo segundo chat\n\n**Tratamento de falhas**: Se o chat solicitado n√£o existir, retornar uma mensagem de erro apropriada.\n\n## CHATS ESPECIALIZADOS DISPON√çVEIS\n\n### 1. MCPChats\n**Fun√ß√£o**: Retorna todas os chats especializados dispon√≠veis\n\n## REGRAS OBRIGAT√ìRIAS\n\n### SEMPRE:\n1.  Iniciar atendimentos novos com o **inicialService**\n2.  Executar exatamente UM chat por quest√£o(exceto com \"SISTEMA INFO\")\n3.  Entregar a resposta exata do chat sem qualquer modifica√ß√£o\n4.  Seguir as regras de formata√ß√£o para m√≠dias e links\n5.  Respeitar a especializa√ß√£o de cada chat\n\n### NUNCA:\n1.  Modificar, ajustar ou complementar respostas dos chats\n2.  Responder ao usu√°rio sem executar um chat especializado de ‚ÄúCHATS ESPECIALIZADOS DISPON√çVEIS‚Äù mesmo que voc√™ saiba como responder.\n3.  Executar m√∫ltiplos chats simultaneamente\n4.  Misturar fun√ß√µes entre os diferentes chats\n5.  Criar respostas pr√≥prias em vez de usar as dos chats\n\n\n## INFORMA√á√ïES AUXILIARES"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        2160,
        -128
      ],
      "id": "e272a7e6-12f3-4581-968b-599a182c4d68",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "endpointUrl": "https://workflows.codesefaz.local/mcp/test/sse",
        "include": "selected",
        "includeTools": [
          "inicialService",
          "rag",
          "schedulingAgent",
          "store"
        ]
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.1,
      "position": [
        2368,
        112
      ],
      "id": "c292d179-7bbf-41e7-a462-70dab13ff6bf",
      "name": "MCPChats"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('test').item.json.memory }}",
        "sessionTTL": 900,
        "contextWindowLength": 100
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [
        2416,
        880
      ],
      "id": "eb6d9a7f-49fb-4440-b6de-fdbd0ccd09bb",
      "name": "memoryConversation1",
      "credentials": {
        "redis": {
          "id": "29bbEUHvq7aUXKnr",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2224,
        880
      ],
      "id": "3638c90a-d35a-4df6-bb1f-f4e224b3bb89",
      "name": "modelConversation1",
      "credentials": {
        "googlePalmApi": {
          "id": "xDAt2NZg77gJsoYW",
          "name": "Gemini(PaLM) Api"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Quest√£o do Usu√°rio:\n{{ $json.query }}\n\nMem√≥ria do Usu√°rio (memory):\n{{ $('test').item.json.memory }}",
        "options": {
          "systemMessage": "=## PERFIL E FUN√á√ÉO PRINCIPAL\nVoc√™ √© um **sistema de roteamento de chat inteligente** com a responsabilidade exclusiva de direcionar a quest√£o dos usu√°rios para chats especializados. **Importante: voc√™ n√£o responde diretamente ao usu√°rio** - voc√™ apenas analisa a quest√£o do usu√°rio, seleciona o chat especializado apropriado e retorna a resposta gerada por esse chat sem modifica√ß√µes.\n\n## RESPONSABILIDADES CENTRAIS\n1. **An√°lise de inten√ß√£o**: Identificar com precis√£o o contexto e a necessidade do usu√°rio\n2. **Sele√ß√£o de chat**: Determinar qual chat especializado √© mais adequado para a quest√£o.\n3. **Execu√ß√£o de chat**: Acionar o chat selecionado para gerar a resposta\n4. **Entrega de resposta**: Fornecer a resposta exata gerada pelo chat especializado, sem altera√ß√µes\n\n## FLUXO DE OPERA√á√ÉO\n1. **Receber quest√£o** do usu√°rio\n2. **Analisar inten√ß√£o** e contexto da conversa\n4. **Selecionar e executar** um √∫nico chat especializado apropriado\n5. **Entregar a resposta** gerada pelo chat especializado sem modifica√ß√µes\n6. **Processar instru√ß√µes especiais** se a resposta contiver \"SISTEMA INFO\"\n\n## PROCESSAMENTO DE INSTRU√á√ïES ESPECIAIS\n\n### Execu√ß√£o de Chats em Sequ√™ncia\nQuando uma resposta cont√©m: \"SISTEMA INFO - Executar Chat 'Nome do Chat' buscando por {detalhes da busca}\"\n\n1. **Extrair**: Nome do chat e detalhes da busca\n2. **Executar**: O chat especificado com os detalhes extra√≠dos\n3. **Retornar**: A resposta gerada pelo segundo chat\n\n**Tratamento de falhas**: Se o chat solicitado n√£o existir, retornar uma mensagem de erro apropriada.\n\n## CHATS ESPECIALIZADOS DISPON√çVEIS\n\n### 1. MCPChats\n**Fun√ß√£o**: Retorna todas os chats especializados dispon√≠veis\n\n## REGRAS OBRIGAT√ìRIAS\n\n### SEMPRE:\n1.  Iniciar atendimentos novos com o **inicialService**\n2.  Executar exatamente UM chat por quest√£o(exceto com \"SISTEMA INFO\")\n3.  Entregar a resposta exata do chat sem qualquer modifica√ß√£o\n4.  Seguir as regras de formata√ß√£o para m√≠dias e links\n5.  Respeitar a especializa√ß√£o de cada chat\n\n### NUNCA:\n1.  Modificar, ajustar ou complementar respostas dos chats\n2.  Responder ao usu√°rio sem executar um chat especializado de ‚ÄúCHATS ESPECIALIZADOS DISPON√çVEIS‚Äù mesmo que voc√™ saiba como responder.\n3.  Executar m√∫ltiplos chats simultaneamente\n4.  Misturar fun√ß√µes entre os diferentes chats\n5.  Criar respostas pr√≥prias em vez de usar as dos chats\n\n\n## INFORMA√á√ïES AUXILIARES"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        2384,
        672
      ],
      "id": "d72bc054-f605-4ba7-a8bf-3d2c0efeb409",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "endpointUrl": "https://workflows.codesefaz.local/mcp/test/sse",
        "include": "selected",
        "includeTools": [
          "inicialService",
          "rag",
          "schedulingAgent",
          "store"
        ]
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.1,
      "position": [
        2592,
        880
      ],
      "id": "ac07177a-69d3-4fa2-a531-cfb458a9360d",
      "name": "MCPChats1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a18fb480-7206-496e-b981-ea0e2c20131f",
              "name": "query",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            },
            {
              "id": "9d640a0c-b26f-4cbe-8450-5e5c89cfb48d",
              "name": "memory",
              "value": "test-memory-10",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2192,
        672
      ],
      "id": "ea3d7f6e-edbb-423e-8893-6140f085c9af",
      "name": "test"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        1984,
        672
      ],
      "id": "6599ed0d-4dd5-499a-99c7-c8a69ccf2dda",
      "name": "Chat",
      "webhookId": "6352fb11-05ab-4098-a493-3540fa96323e"
    },
    {
      "parameters": {
        "content": "## üåê Trigger de Chat Para Testes",
        "height": 460,
        "width": 832,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1936,
        576
      ],
      "id": "2c88b875-2960-497b-8f64-1795cc6c2143",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "## üîÑ Extraindo/Criando os dados do cliente",
        "height": 480,
        "width": 1024,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1920,
        -736
      ],
      "id": "870ca7df-1e9a-4a4c-a91b-026aa0b38b37",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "04a27288-4ab7-44fb-bfef-adb478190619",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2288,
        -448
      ],
      "id": "6b435fbb-55be-45b0-92c6-d6d7ae5e92ea",
      "name": "hasData"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        3104,
        -432
      ],
      "id": "a9a435f4-e5f2-431a-bdbb-0a1491e01f3f",
      "name": "chatMemory"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2000,
        112
      ],
      "id": "abb7bffd-02fd-46e5-8b6e-c7dc26baab98",
      "name": "modelConversation",
      "credentials": {
        "googlePalmApi": {
          "id": "xDAt2NZg77gJsoYW",
          "name": "Gemini(PaLM) Api"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3408,
        -224
      ],
      "id": "cde53a1a-9947-47f6-acd4-fc9c2eca49e2",
      "name": "modelChat",
      "credentials": {
        "googlePalmApi": {
          "id": "xDAt2NZg77gJsoYW",
          "name": "Gemini(PaLM) Api"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3536,
        -16
      ],
      "id": "59710530-5714-454a-b1ef-27e174e8ede6",
      "name": "modelParser",
      "credentials": {
        "googlePalmApi": {
          "id": "xDAt2NZg77gJsoYW",
          "name": "Gemini(PaLM) Api"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Analise o hist√≥rico de chat para extrair dados do cliente e classificar a etapa do funil de vendas.\nSe a informa√ß√£o n√£o for encontrada, retorne null.\n\nSua resposta deve ser estritamente em formato JSON e conter as seguintes chaves. Se uma informa√ß√£o n√£o for encontrada, o valor correspondente deve ser nulo (null).\n\n- \"nome_do_cliente\": O nome completo do cliente.\n- \"telefone\": O n√∫mero de telefone do cliente, incluindo o c√≥digo do pa√≠s e DDD.\n- \"email\": O endere√ßo de e-mail do cliente.\n- \"etapa_funil\": A etapa do funil que corresponde √† conversa. Use apenas \"novo_contato\", \"qualificacao_loja\", \"qualificacao_aulas\", ou \"agendamento_aula\".\n- \"interesse\": Um array de strings com os interesses do cliente, como \"Aulas de surf\", \"Produtos de loja\", \"Loja online\" ou \"Loja f√≠sica\".\n- \"data_contato\": A data atual da conversa, no formato \"YYYY-MM-DD\".\n\nExemplo de output:\n{\n  \"nome\": \"Fulano de Tal\",\n  \"telefone\": \"5511999999999\",\n  \"email\": \"fulanodetal@gmail.com\",\n  \"etapa_funil\": \"novo_contato\",\n  \"interesse\": [\"Aulas de surf\"]\n}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "type": "HumanMessagePromptTemplate",
              "message": "={{ $json.messages.toJsonString() }}"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        3456,
        -432
      ],
      "id": "8a73945c-87bc-47b7-836d-09988d5c0d86",
      "name": "funnelStageChain"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"output\": {\n    \"nome\": \"Fulano de Tal\",\n    \"telefone\": \"5511999999999\",\n    \"email\": \"fulanodetal@gmail.com\",\n    \"etapa_funil\": \"novo_contato\",\n    \"interesse\": [\"Aulas de surf\"]\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        3744,
        -16
      ],
      "id": "e6c98f7c-87c6-44c9-9138-f5531c585867",
      "name": "structuredOutput"
    },
    {
      "parameters": {
        "content": "## ü§ù Coletando Dados do Cliente",
        "height": 972,
        "width": 964,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2976,
        -736
      ],
      "typeVersion": 1,
      "id": "11a6b6e8-c987-414c-a35e-d6241692e178",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "jsCode": "const currentData = $('test1').first().json.output;\nconst leadData = $('leadData-old').first().json;\n\n// Cria um objeto para armazenar as atualiza√ß√µes\nconst updatedFields = {};\n\nObject.entries(currentData).forEach(([key, value]) => {\n  // Verifica se a chave existe em ambos e se o valor √© diferente\n  if (key in leadData && JSON.stringify(value) !== JSON.stringify(leadData[key])) {\n    updatedFields[key] = value;\n  }\n});\n\n// Combina os dados originais com os campos atualizados\nconst combinedData = { ...leadData, ...updatedFields };\n\n// Cria o objeto de sa√≠da com as chaves desejadas\nconst finalData = {\n  conversation_id: combinedData.conversation_id,\n  nome: combinedData.nome,\n  telefone: combinedData.telefone,\n  email: combinedData.email,\n  etapa_funil: combinedData.etapa_funil,\n  interesse: combinedData.interesse\n};\n\nreturn [{ json: finalData }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4192,
        -288
      ],
      "id": "b52597f7-8273-4f85-9a8b-221caa426e6a",
      "name": "updateValues"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        5024,
        -288
      ],
      "id": "e7ed3af5-eadb-49dd-aff2-54855fa72d1c",
      "name": "endProcessing"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// 1. Puxa labels da conversa\nconst labelsChatwoot = $('webhookDataChatwoot').first().json.body.conversation.labels || [];\n\n// 2. Puxa etapa_funil e interesse do n√≥ ‚ÄúdataClassifier‚Äù\nconst etapa_funil_valor = $('dataClassifier').first().json.etapa_funil || null;\nconst interesse         = $('dataClassifier').first().json.interesse    || [];\n\n// 3. Cria o array da etapa do funil (se o valor n√£o for null)\nconst etapa_funil_array = etapa_funil_valor ? [etapa_funil_valor] : [];\n\n// 4. Junta tudo num √∫nico array\nconst arrayMain = [\n  ...labelsChatwoot,\n  ...etapa_funil_array,\n  ...interesse,\n];\n\n// 4. Processa o texto para remover acentua√ß√£o e caracteres especiais\nconst arrayProcessed = arrayMain.map(e => {\n  // Encadeia os m√©todos e retorna a nova string\n  return e.toLowerCase()     // deixa tudo em min√∫sculo\n    .normalize('NFD')        // separa letras dos acentos\n    .replace(/\\p{M}/gu, '') // remove todos os acentos, deixando s√≥ as letras\n    .replace(/ /g, '_');     // remove todos os espa√ßos, deixar um _ no lugar\n});\n\n// 8. Grava de volta em labels\n$json.labels = arrayProcessed;\n\nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4608,
        80
      ],
      "id": "df487351-1d77-4e0e-8bfb-0f734756ea39",
      "name": "processAllLabels"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.nome }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "id": "fa008860-514c-4d18-80b5-cd43afb025c7"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "nome"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5488bc07-53b4-4937-905f-6fcef1116be0",
                    "leftValue": "={{ $json.email }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "email"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f3cd13c2-cb74-4fbb-8c06-968fbe54eca3",
                    "leftValue": "={{ $json.telefone }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "telefone"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d94487c5-35c4-4b0d-a8d4-9a6302fbcc21",
                    "leftValue": "={{ $json.etapa_funil }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "etapa_funil"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "01631116-67b7-4bdf-a143-a798e4f6d011",
                    "leftValue": "={{ $json.interesse }}",
                    "rightValue": "",
                    "operator": {
                      "type": "array",
                      "operation": "notEmpty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "interesse"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "16552584-5fa5-452c-b012-89b4a18fcf94",
                    "leftValue": "={{\n  $json.nome.isNotEmpty() ||\n  $json.telefone.isNotEmpty() ||\n  $json.email.isNotEmpty() ||\n  $json.etapa_funil.isNotEmpty() ||\n  $json.interesse.isNotEmpty()\n}}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "atualiza_tags"
            }
          ]
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        4384,
        -352
      ],
      "id": "57aa1eef-3474-4cd1-b8f3-4cea5524a2aa",
      "name": "dataClassifier",
      "notesInFlow": true
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ $('setVariables').first().json.baseUrl }}/api/v1/accounts/{{ $('payloadResume').first().json.account_id }}/contacts/{{ $('payloadResume').first().json.contact.id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "name",
              "value": "={{ $('updateBaserowLead').item.json.nome }}"
            },
            {
              "name": "email",
              "value": "={{ $('updateBaserowLead').item.json.email }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4800,
        -640
      ],
      "id": "f5c5926f-c649-4b21-bb8e-35822f432f01",
      "name": "updateChatwootName",
      "credentials": {
        "httpHeaderAuth": {
          "id": "pUofjeHZFs7QLIQq",
          "name": "Chatwoot account"
        }
      }
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ $('setVariables').first().json.baseUrl }}/api/v1/accounts/{{ $('payloadResume').first().json.account_id }}/contacts/{{ $('payloadResume').first().json.contact.id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "name",
              "value": "={{ $('updateBaserowLead').item.json.nome }}"
            },
            {
              "name": "email",
              "value": "={{ $('updateBaserowLead').item.json.email }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4800,
        -496
      ],
      "id": "f9ab7a3a-0130-471e-94ae-d12ac895b3b7",
      "name": "updateChatwootEmail",
      "credentials": {
        "httpHeaderAuth": {
          "id": "pUofjeHZFs7QLIQq",
          "name": "Chatwoot account"
        }
      }
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ $('setVariables').first().json.baseUrl }}/api/v1/accounts/{{ $('payloadResume').first().json.account_id }}/conversations/{{ $('payloadResume').first().json.conversation_id }}/labels",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "labels",
              "value": "={{ $('processAllLabels').item.json.labels }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4800,
        80
      ],
      "id": "4fa15c00-cd84-431f-9ee0-c0b308ae3350",
      "name": "updateChatwootLabels",
      "credentials": {
        "httpHeaderAuth": {
          "id": "pUofjeHZFs7QLIQq",
          "name": "Chatwoot account"
        }
      }
    },
    {
      "parameters": {
        "content": "## üóÇÔ∏è Sincroniza√ß√£o de dados do lead no Baserow e Chatwoot",
        "height": 972,
        "width": 1252,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3968,
        -736
      ],
      "typeVersion": 1,
      "id": "a461c847-dca8-44f3-b5d9-026d59110ae3",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "options": {
          "prompt": "Instructions:\n--------------\n{instructions}\n--------------\nCompletion:\n--------------\n{completion}\n--------------\n\nAbove, the Completion did not satisfy the constraints given in the Instructions.\nError:\n--------------\n{error}\n--------------\n\nPlease try again. Please only respond with an answer that satisfies the constraints laid out in the Instructions:"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        3600,
        -224
      ],
      "id": "8a81c021-1a55-4b9a-a96e-7f27b8cd0df2",
      "name": "outputParser"
    },
    {
      "parameters": {
        "jsCode": "return $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2704,
        -432
      ],
      "id": "5927c434-77b7-4ded-a5a7-ccdb35de921b",
      "name": "appendLead"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "Leads",
        "limit": 1,
        "filters": {
          "conditions": [
            {
              "keyName": "telefone",
              "condition": "eq",
              "keyValue": "={{ $('payloadResume').item.json.conversation_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1280,
        -640
      ],
      "id": "3c37a6e6-d4c1-44f1-bed7-abeda378eac2",
      "name": "findSupabaseLead",
      "notesInFlow": true,
      "credentials": {
        "supabaseApi": {
          "id": "pvSzMX1NSuLnku0e",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "Leads",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('findSupabaseLead').item.json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1488,
        -640
      ],
      "id": "5b3e8d46-8e86-41cb-8acc-33c39f6e1c66",
      "name": "deleteSupabaseLead",
      "notesInFlow": true,
      "credentials": {
        "supabaseApi": {
          "id": "pvSzMX1NSuLnku0e",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "Leads",
        "limit": 1,
        "filters": {
          "conditions": [
            {
              "keyName": "conversation_id",
              "condition": "eq",
              "keyValue": "={{ $('payloadResume').item.json.conversation_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2064,
        -448
      ],
      "id": "e8f32c82-b5bd-42b8-82eb-0be28db876f2",
      "name": "getLeadData",
      "notesInFlow": true,
      "credentials": {
        "supabaseApi": {
          "id": "pvSzMX1NSuLnku0e",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "Leads",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "conversation_id",
              "fieldValue": "={{ $('payloadResume').item.json.conversation_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2496,
        -576
      ],
      "id": "6a7c4e7f-c888-4402-8c84-91f15d3e0f3a",
      "name": "createLeadData",
      "notesInFlow": true,
      "credentials": {
        "supabaseApi": {
          "id": "pvSzMX1NSuLnku0e",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "Leads",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $('appendLead').item.json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        4000,
        -288
      ],
      "id": "2c9d8cb0-82b9-4f2d-b33d-51fdbabf216b",
      "name": "leadData",
      "notesInFlow": true,
      "credentials": {
        "supabaseApi": {
          "id": "pvSzMX1NSuLnku0e",
          "name": "Supabase account"
        }
      },
      "notes": "Get Lead Data"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Leads",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.conversation_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "nome",
              "fieldValue": "={{ $json.nome }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        4608,
        -640
      ],
      "id": "a95c64e1-1157-4c67-b76e-33766afa2962",
      "name": "updateName",
      "notesInFlow": true,
      "credentials": {
        "supabaseApi": {
          "id": "pvSzMX1NSuLnku0e",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Leads",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.conversation_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "email",
              "fieldValue": "={{ $json.email }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        4608,
        -496
      ],
      "id": "2c3a6bdc-25c5-4a88-9221-b1e09e6e06ea",
      "name": "updateEmail",
      "notesInFlow": true,
      "credentials": {
        "supabaseApi": {
          "id": "pvSzMX1NSuLnku0e",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Leads",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.conversation_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "telefone",
              "fieldValue": "={{ $json.telefone }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        4608,
        -352
      ],
      "id": "99084404-d2c9-40d0-97fb-054e34673006",
      "name": "updatePhone",
      "notesInFlow": true,
      "credentials": {
        "supabaseApi": {
          "id": "pvSzMX1NSuLnku0e",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Leads",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.conversation_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "etapa_funil",
              "fieldValue": "={{ $json.etapa_funil }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        4608,
        -208
      ],
      "id": "ca2b9800-08f8-4ead-a7b6-952ccb449447",
      "name": "updateFunnel",
      "notesInFlow": true,
      "credentials": {
        "supabaseApi": {
          "id": "pvSzMX1NSuLnku0e",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Leads",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.conversation_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "interesse",
              "fieldValue": "={{ $json.interesse }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        4608,
        -64
      ],
      "id": "717d9e14-48a7-4498-bfaf-fa318e8af0c3",
      "name": "updateInterest",
      "notesInFlow": true,
      "credentials": {
        "supabaseApi": {
          "id": "pvSzMX1NSuLnku0e",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('setVariables').item.json.memory }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        2192,
        112
      ],
      "id": "5c677d11-d7f7-4352-8aaf-0aaf4beff328",
      "name": "memory",
      "credentials": {
        "postgres": {
          "id": "i37IDn2SW1eeq9LE",
          "name": "Supabase Chat Memory"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('setVariables').first().json.memory }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        3072,
        -224
      ],
      "id": "d689679c-5413-4ed0-bd60-b8c67461db4a",
      "name": "memoryChat",
      "credentials": {
        "postgres": {
          "id": "i37IDn2SW1eeq9LE",
          "name": "Supabase Chat Memory"
        }
      }
    }
  ],
  "pinData": {
    "webhookDataChatwoot": [
      {
        "json": {
          "headers": {
            "host": "workflows.codesefaz.local",
            "user-agent": "rest-client/2.1.0 (linux-musl x86_64) ruby/3.3.3p89",
            "content-length": "4351",
            "accept": "application/json",
            "accept-encoding": "gzip;q=1.0,deflate;q=0.6,identity;q=0.3",
            "content-type": "application/json",
            "x-forwarded-for": "172.18.0.13",
            "x-forwarded-host": "workflows.codesefaz.local",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "c85c4f6d83ed",
            "x-real-ip": "172.18.0.13"
          },
          "params": {},
          "query": {},
          "body": {
            "account": {
              "id": 2,
              "name": "codesefaz"
            },
            "additional_attributes": {},
            "content_attributes": {},
            "content_type": "text",
            "content": "gostaria de marcar um hor√°rio para aula de surf as 14 hrs esse s√°bado",
            "conversation": {
              "additional_attributes": {},
              "can_reply": true,
              "channel": "Channel::Api",
              "contact_inbox": {
                "id": 79,
                "contact_id": 49,
                "inbox_id": 10,
                "source_id": "648e568d-a38e-4c5e-89ff-876aaa77008a",
                "created_at": "2025-08-29T18:07:27.932Z",
                "updated_at": "2025-08-29T18:07:27.932Z",
                "hmac_verified": false,
                "pubsub_token": "KDwGtgBXCMKnMP3CB29gwPa4"
              },
              "id": 63,
              "inbox_id": 10,
              "messages": [
                {
                  "id": 370,
                  "content": "gostaria de marcar um hor√°rio para aula de surf as 14 hrs esse s√°bado",
                  "account_id": 2,
                  "inbox_id": 10,
                  "conversation_id": 63,
                  "message_type": 0,
                  "created_at": 1757335904,
                  "updated_at": "2025-09-08T12:51:44.116Z",
                  "private": false,
                  "status": "sent",
                  "source_id": "WAID:3EB02F464D3CF946FED67C",
                  "content_type": "text",
                  "content_attributes": {},
                  "sender_type": "Contact",
                  "sender_id": 49,
                  "external_source_ids": {},
                  "additional_attributes": {},
                  "processed_message_content": "gostaria de marcar um hor√°rio para aula de surf as 14 hrs esse s√°bado",
                  "sentiment": {},
                  "conversation": {
                    "assignee_id": null,
                    "unread_count": 9,
                    "last_activity_at": 1757335904,
                    "contact_inbox": {
                      "source_id": "648e568d-a38e-4c5e-89ff-876aaa77008a"
                    }
                  },
                  "sender": {
                    "additional_attributes": {},
                    "custom_attributes": {},
                    "email": null,
                    "id": 49,
                    "identifier": "558592647973@s.whatsapp.net",
                    "name": "Car_J",
                    "phone_number": "+558592647973",
                    "thumbnail": "https://chat4.codesefaz.local/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBGZz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--211e9bfacd3ea5d6328001233d8ae877c4c3d873/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--e8fb65bb25320f85f62251997656419870a69ec9/509057742_1466073934558502_5794202598111584437_n.jpg",
                    "blocked": false,
                    "type": "contact"
                  }
                }
              ],
              "labels": [],
              "meta": {
                "sender": {
                  "additional_attributes": {},
                  "custom_attributes": {},
                  "email": null,
                  "id": 49,
                  "identifier": "558592647973@s.whatsapp.net",
                  "name": "Car_J",
                  "phone_number": "+558592647973",
                  "thumbnail": "https://chat4.codesefaz.local/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBGZz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--211e9bfacd3ea5d6328001233d8ae877c4c3d873/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--e8fb65bb25320f85f62251997656419870a69ec9/509057742_1466073934558502_5794202598111584437_n.jpg",
                  "blocked": false,
                  "type": "contact"
                },
                "assignee": null,
                "team": null,
                "hmac_verified": false
              },
              "status": "open",
              "custom_attributes": {},
              "snoozed_until": null,
              "unread_count": 9,
              "first_reply_created_at": "2025-08-29T18:07:58.807Z",
              "priority": null,
              "waiting_since": 1757335774,
              "agent_last_seen_at": 0,
              "contact_last_seen_at": 1756491259,
              "last_activity_at": 1757335904,
              "timestamp": 1757335904,
              "created_at": 1756490847,
              "updated_at": 1757335904.12178
            },
            "created_at": "2025-09-08T12:51:44.116Z",
            "id": 370,
            "inbox": {
              "id": 10,
              "name": "robonildo"
            },
            "message_type": "incoming",
            "private": false,
            "sender": {
              "account": {
                "id": 2,
                "name": "codesefaz"
              },
              "additional_attributes": {},
              "avatar": "https://chat4.codesefaz.local/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBGZz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--211e9bfacd3ea5d6328001233d8ae877c4c3d873/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--e8fb65bb25320f85f62251997656419870a69ec9/509057742_1466073934558502_5794202598111584437_n.jpg",
              "custom_attributes": {},
              "email": null,
              "id": 49,
              "identifier": "558592647973@s.whatsapp.net",
              "name": "Car_J",
              "phone_number": "+558592647973",
              "thumbnail": "https://chat4.codesefaz.local/rails/active_storage/representations/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBGZz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--211e9bfacd3ea5d6328001233d8ae877c4c3d873/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdCem9MWm05eWJXRjBTU0lJYW5CbkJqb0dSVlE2RTNKbGMybDZaVjkwYjE5bWFXeHNXd2RwQWZvdyIsImV4cCI6bnVsbCwicHVyIjoidmFyaWF0aW9uIn19--e8fb65bb25320f85f62251997656419870a69ec9/509057742_1466073934558502_5794202598111584437_n.jpg",
              "blocked": false
            },
            "source_id": "WAID:3EB02F464D3CF946FED67C",
            "event": "message_created"
          },
          "webhookUrl": "http://n8n_webhook:5678/webhook/mensagem-do-chatwoot",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "payloadResume": {
      "main": [
        [
          {
            "node": "filterFromMe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filterFromMe": {
      "main": [
        [
          {
            "node": "setVariables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "messageInsert": {
      "main": [
        [
          {
            "node": "messageAgregated",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "setCurrentDate": {
      "main": [
        [
          {
            "node": "getMessage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getFutureDate": {
      "main": [
        [
          {
            "node": "confereFutureTime",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getMessage": {
      "main": [
        [
          {
            "node": "messageInsert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "messageAgregated": {
      "main": [
        [
          {
            "node": "tempoEspera",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tempoEspera": {
      "main": [
        [
          {
            "node": "getFutureDate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "setDateTime": {
      "main": [
        [
          {
            "node": "setCurrentDate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "setVariables": {
      "main": [
        [
          {
            "node": "messageReset",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "webhookDataChatwoot": {
      "main": [
        [
          {
            "node": "mensageType",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "resetRedisMemory": {
      "main": [
        [
          {
            "node": "findSupabaseLead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "removeChatwotContact": {
      "main": [
        [
          {
            "node": "endCleaningOperation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sendChatwootMsgReset": {
      "main": [
        [
          {
            "node": "removeChatwotContact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "messageReset": {
      "main": [
        [
          {
            "node": "resetRedisMemory",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "setDateTime",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "endCleaningOperation": {
      "main": [
        []
      ]
    },
    "contentMesssage": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "setOutput": {
      "main": [
        [
          {
            "node": "sendChatwootMessage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sendChatwootMessage": {
      "main": [
        [
          {
            "node": "resetMessageAgregated",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "resetMessageAgregated": {
      "main": [
        [
          {
            "node": "endConversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "confereFutureTime": {
      "main": [
        [
          {
            "node": "getLeadData",
            "type": "main",
            "index": 0
          },
          {
            "node": "contentMesssage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mensageType": {
      "main": [
        [
          {
            "node": "audioToText",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "payloadResume",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "doNothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "audioToText": {
      "main": [
        [
          {
            "node": "mergeTextFromAudio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mergeTextFromAudio": {
      "main": [
        [
          {
            "node": "payloadResume",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "setOutput",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCPChats": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "memoryConversation1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "modelConversation1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        []
      ]
    },
    "MCPChats1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "test": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat": {
      "main": [
        [
          {
            "node": "test",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "hasData": {
      "main": [
        [
          {
            "node": "createLeadData",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "appendLead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "chatMemory": {
      "main": [
        [
          {
            "node": "funnelStageChain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "modelConversation": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "modelChat": {
      "ai_languageModel": [
        [
          {
            "node": "funnelStageChain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "modelParser": {
      "ai_languageModel": [
        [
          {
            "node": "outputParser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "structuredOutput": {
      "ai_outputParser": [
        [
          {
            "node": "outputParser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "funnelStageChain": {
      "main": [
        [
          {
            "node": "leadData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "updateValues": {
      "main": [
        [
          {
            "node": "dataClassifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "dataClassifier": {
      "main": [
        [
          {
            "node": "updateName",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "updateEmail",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "updatePhone",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "updateFunnel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "updateInterest",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "processAllLabels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "processAllLabels": {
      "main": [
        [
          {
            "node": "updateChatwootLabels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "updateChatwootEmail": {
      "main": [
        [
          {
            "node": "endProcessing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "updateChatwootName": {
      "main": [
        [
          {
            "node": "endProcessing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "updateChatwootLabels": {
      "main": [
        [
          {
            "node": "endProcessing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "outputParser": {
      "ai_outputParser": [
        [
          {
            "node": "funnelStageChain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "appendLead": {
      "main": [
        [
          {
            "node": "chatMemory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "findSupabaseLead": {
      "main": [
        [
          {
            "node": "deleteSupabaseLead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "deleteSupabaseLead": {
      "main": [
        [
          {
            "node": "sendChatwootMsgReset",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getLeadData": {
      "main": [
        [
          {
            "node": "hasData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "createLeadData": {
      "main": [
        [
          {
            "node": "appendLead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "leadData": {
      "main": [
        [
          {
            "node": "updateValues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "updateName": {
      "main": [
        [
          {
            "node": "updateChatwootName",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "updateEmail": {
      "main": [
        [
          {
            "node": "updateChatwootEmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "updatePhone": {
      "main": [
        [
          {
            "node": "endProcessing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "updateFunnel": {
      "main": [
        [
          {
            "node": "endProcessing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "updateInterest": {
      "main": [
        [
          {
            "node": "endProcessing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "memoryChat": {
      "ai_memory": [
        [
          {
            "node": "chatMemory",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a61c2c98-070a-4712-a521-54a5dfa24cb6",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "33738330930e3881dd5571eca013f36ddf8aab20e4ea5c1f2ebaf4a2b4668ac6"
  },
  "id": "1wBqAJZEsot9hT3t",
  "tags": [
    {
      "createdAt": "2025-08-22T18:59:56.081Z",
      "updatedAt": "2025-08-22T18:59:56.081Z",
      "id": "2pEE61GlxjAhVgV3",
      "name": "MCP"
    },
    {
      "createdAt": "2025-08-22T19:00:19.825Z",
      "updatedAt": "2025-08-22T19:00:19.825Z",
      "id": "bSQasn7wRenC626N",
      "name": "Surf & Cloths"
    },
    {
      "createdAt": "2025-08-22T19:00:42.547Z",
      "updatedAt": "2025-08-22T19:00:42.547Z",
      "id": "EP5SBiM8pNpr4aOY",
      "name": "Mult-Agent"
    },
    {
      "createdAt": "2025-08-22T19:00:48.658Z",
      "updatedAt": "2025-08-22T19:00:48.658Z",
      "id": "qibqNTLg4aqgPwJx",
      "name": "Main"
    }
  ]
}